<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--Spring整合MyBatis-->
    <!--配置数据源dataSource-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <!--默认端口3306，通常在url直接设置中文字符集，防止乱码，注意&符号是特殊字符，需要转义&amp-->
        <property name="url" value="jdbc:mysql://localhost:3306/sm?useUnicode=true&amp;characterEncoding=utf-8"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
    </bean>
    <!--使用MyBatis实现持久化，需要配置sqlSessionFactory，通过属性注入构造SessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--定义别名，在映射文件中，可以不加包名，可以直接使用类名-->
        <property name="typeAliasesPackage" value="com.bupt.sm.entity"/>
    </bean>
    <!--Mybatis自动映射，指定一个包，包里面放置对应持久化接口和对应文件-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.bupt.sm.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 声明式事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/><!-- 引用数据源 -->
    </bean>
    <!-- 定义通知，tx空间中的advice标签 ，以通知形式细致的安排事务的处理方式-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes><!-- 查询相关方法，设置为只读，加快执行效率； -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <!--除此之外，增删改操作，强制使用事务。设置事务的传播行为，REQUIRED。当一个业务方法被调用，如果它包含在一个事务里，就依赖这个事务；反之则会以一个事务封装 -->
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    <!--植入，aop命名空间下的config-->
    <aop:config>
        <!--定义切入点-->
        <!--aspect表达式：该包下所有的类，该类下所有名字的方法，方法的参数任意，即代表业务层所有的方法-->
        <aop:pointcut id="txPointcut" expression="execution(* com.bupt.sm.service.*.*(..))"/>
        <!--关联切入点和通知-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!-- 全局扫描 -->
    <!-- 配置bean或者注解方式，此处选用注解的方式，让Spring自动扫描 -->
    <context:component-scan base-package="com.bupt.sm"/> <!--指定上层所在包，这样所有的包都能扫描-->
    <aop:aspectj-autoproxy/><!--以aop方式处理日志，打开aspect自动代理-->
</beans>